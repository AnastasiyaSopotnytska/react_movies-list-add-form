{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","addMovie","useState","setTitle","hasTitle","setHasTitle","setDescription","hasDescription","setHasDescription","setImgUrl","hasImgUrl","setHasImgUrl","setImdbUrl","hasImdbUrl","setHasImdbUrl","setImdbId","hasImdbId","setHasImdbId","onSubmit","event","preventDefault","htmlFor","type","id","classNames","error","value","onChange","target","App","moviesFromServer","setMovie","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0aaa530c.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitle, setHasTitle] = useState(false);\n\n  const [description, setDescription] = useState('');\n  const [hasDescription, setHasDescription] = useState(false);\n\n  const [imgUrl, setImgUrl] = useState('');\n  const [hasImgUrl, setHasImgUrl] = useState(false);\n\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [hasImdbUrl, setHasImdbUrl] = useState(false);\n\n  const [imdbId, setImdbId] = useState('');\n  const [hasImdbId, setHasImdbId] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setHasTitle(!title);\n    setHasDescription(!description);\n    setHasImdbId(!imdbId);\n    setHasImdbUrl(!imdbUrl);\n    setHasImgUrl(!imgUrl);\n\n    if (title && description && imgUrl && imdbUrl && imdbId) {\n      addMovie({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n\n      setTitle('');\n      setDescription('');\n      setImdbUrl('');\n      setImdbId('');\n      setImgUrl('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"titleInput\">Title: </label>\n      <input\n        type=\"text\"\n        id=\"titleInput\"\n        className={classNames({ error: hasTitle }, 'form-control')}\n        // className=\"form-control\"\n        value={title}\n        onChange={(event) => {\n          setHasTitle(false);\n          setTitle(event.target.value);\n        }}\n      />\n\n      {hasTitle && (\n        <div className=\"text-danger\">Title is empty</div>\n      )}\n\n      <label htmlFor=\"descriptionInput\">Description: </label>\n      <input\n        type=\"text\"\n        id=\"descriptionInput\"\n        className={classNames({ error: hasDescription }, 'form-control')}\n        value={description}\n        onChange={(event) => {\n          setHasDescription(false);\n          setDescription(event.target.value);\n        }}\n      />\n\n      {hasDescription && (\n        <div className=\"text-danger\">Description is empty</div>\n      )}\n\n      <label htmlFor=\"imgUrlInput\">ImgUrl: </label>\n      <input\n        type=\"url\"\n        id=\"imgUrlInput\"\n        className={classNames({ error: hasImgUrl }, 'form-control')}\n        value={imgUrl}\n        onChange={(event) => {\n          setHasImgUrl(false);\n          setImgUrl(event.target.value);\n        }}\n      />\n\n      {hasImgUrl && (\n        <div className=\"text-danger\">ImgUrl is empty</div>\n      )}\n\n      <label htmlFor=\"imdbUrlInput\">ImdbUrl: </label>\n      <input\n        type=\"url\"\n        id=\"imdbUrlInput\"\n        className={classNames({ error: hasImdbUrl }, 'form-control')}\n        value={imdbUrl}\n        onChange={(event) => {\n          setImdbUrl(event.target.value);\n          setHasImdbUrl(false);\n        }}\n      />\n\n      {hasImdbUrl && (\n        <div className=\"text-danger\">ImdbUrl is empty</div>\n      )}\n\n      <label htmlFor=\"imdbIdInput\">ImdbId: </label>\n      <input\n        type=\"text\"\n        id=\"imdbIdInput\"\n        className={classNames({ error: hasImdbId }, 'form-control')}\n        value={imdbId}\n        onChange={(event) => {\n          setImdbId(event.target.value);\n          setHasImdbId(false);\n        }}\n      />\n\n      {hasImdbId && (\n        <div className=\"text-danger\">ImdbId is empty</div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"mt-2 btn btn-outline-dark\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovie] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovie(current => [...current, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}